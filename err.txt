//BACKEND FOLDER

//controllers
//auth.controllers.js
import { generateToken } from "../lib/utils.js";
import cloudinary from "../lib/cloudinary.js";
import User from "../models/user.model.js";
import bcrypt from "bcryptjs";
// import fs from "fs";

export const signup = async (req, res) => {
  const { fullName, email, password } = req.body;
  console.log("Signup request received:", { fullName, email, password });
  try {
    if (!fullName || !email || !password) {
      return res.status(400).json({
        message: "All fields are required",
      });
    }

    if (password.length < 6) {
      return res.status(400).json({
        message: "Password must be at least 6 characters long",
      });
    }

    const user = await User.findOne({ email });
    // console.log("Checked for existing user:", user);
    if (user) {
      return res.status(400).json({
        message: "User already exists",
      });
    }

    const salt = await bcrypt.genSalt(10);
    const hashedPassword = await bcrypt.hash(password, salt);
    // console.log("Password hashed:", hashedPassword);

    const newUser = new User({
      fullName,
      email,
      password: hashedPassword,
    });

    if (newUser) {
      // gererated jwt token
      generateToken(newUser._id, res);
      // console.log("Token generated and cookie set");
      await newUser.save();
      console.log("User saved to database:", newUser);

      res.status(201).json({
        _id: newUser._id,
        fullname: newUser.fullName,
        email: newUser.email,
        profilePic: newUser.profilePic,
      });
      console.log("Signup successful, response sent");
    } else {
      res.send(400).json({
        message: "Invalid user data",
      });
    }
  } catch (error) {
    console.error("Error in signup controller:", error.message);
    res.status(500).json({
      message: "Internal server error",
    });
  }
  // res.send("signup route is working!");
};

export const login = async (req, res) => {
  // res.send("login route is working!");
  const { email, password } = req.body;
  console.log("Login request received:", { email, password });
  try {
    const user = await User.findOne({ email });
    // console.log("Checked for user:", user);

    if (!user) {
      res.status(400).json({
        message: "Invalid credentials",
      });
    }

    const isPassCorrect = await bcrypt.compare(password, user.password);
    if (!isPassCorrect) {
      res.status(400).json({
        message: "Invalid credentials",
      });
    }

    generateToken(user._id, res);
    // console.log("Generated Token:", token);

    res.status(200).json({
      _id: user._id,
      fullName: user.fullName,
      email: user.email,
      profilePic: user.profilePic,
    });
  } catch (error) {
    console.error("Error in Login controller: ", error.message);
    res.status(500).json({
      message: "Internal server error",
    });
  }
};

export const logout = (req, res) => {
  // res.send("logout route is working!");
  try {
    console.log("Logout request received");
    res.cookie("jwt", "", { maxAge: 0 });
    res.status(200).json({
      message: "Logout successful",
    });
  } catch (error) {
    console.error("Error in Logout controller: ", error.message);
    res.status(500).json({
      message: "Internal server error",
    });
  }
};

export const updateProfile = async (req, res) => {
  try {
    const { profilePic } = req.body;
    const userId = req.user._id;

    if (!profilePic) {
      return res.status(400).json({
        message: "Profile picture is required",
      });
    }

    // if (!req.file) {
    //   return res.status(400).json({
    //     message: "Profile picture is required",
    //   });
    // }


    if (!profilePic) {
      return res.status(400).json({
        message: "Profile picture is required",
      });
    }

    // Upload the profile picture to Cloudinary
    // const uploadResponse = await cloudinary.uploader.upload(profilePic);

    const uploadResponse = await cloudinary.uploader.upload(profilePic);
    const updatedUser = await User.findByIdAndUpdate(
      userId,
      { profilePic: uploadResponse.secure_url },
      { new: true }
    );
    res.status(200).json(updatedUser);

  } catch (error) {
    console.error("Error in updateProfile controller: ", error.message);
    res.status(500).json({
      message: "Internal server error"
    });
  }
};

export const checkAuth = (req, res) => {
  try {
    console.log("Check auth request received");
    res.status(200).json(req.user);
  } catch (error) {
    console.error("Error in checkAuth controller: ", error.message);
    res.status(500).json({
      message: "Internal server error",
    });
  }
};

//message.controller.js
import User from "../models/user.model.js";
import Message from "../models/message.model.js";
import cloudinary from "../lib/cloudinary.js"

export const getUsersForSidebar = async (req, res) => {
    try {
        const loggedInUserId = req.user._id; // Assuming you have the user ID in req.user
        const filterdUsers = await User.find({ _id: { $ne: loggedInUserId } }).select("-password");

        res.status(200).json(filterdUsers)
    } catch (error) {
        console.error("Error in getUsersForSidebar:", error);
        res.status(500).json({ message: "Internal server error"});
    }
}

export const getMessages = async (req, res) => {
    try {
        const { id:urId } = req.params
        const myId = req.user._id // Assuming you have the user ID in req.user

        const messages = await Message.find({
            $or: [
                { senderId: myId, receiverId: urId },
                { senderId: urId, receiverId: myId }
            ]
        })

        res.status(200).json(messages)
    } catch (error) {
        console.error("Error in getMessages:", error);
        res.status(500).json({ message: "Internal server error"});   
    }
}

export const sendMessage = async (req, res) => {
    try {
       const { text, image } = req.body;
       const { id: urId } = req.params;
       const myId = req.user._id;

       let imageUrl;
       if (image) {
        const uploadResponse = await cloudinary.uploader.upload(image);
        imageUrl = uploadResponse.secure_url;
       }

       const newMessage = await Message.create({
        senderId: myId,
        receiverId: urId,
        text,
        image: imageUrl
       })

       //await newMessage.save();

       res.status(201).json(newMessage)
    } catch (error) {
        console.error("Error in sendMessage:", error);
        res.status(500).json({ message: "Internal server error"});   
    }
}

//lib
//cloudinary.js
import {v2 as cloudinary} from "cloudinary";
import {config} from 'dotenv';

config();

cloudinary.config({
    cloud_name: process.env.CLOUDINARY_CLOUD_NAME,
    api_key: process.env.CLOUDINARY_API_KEY,
    api_secret: process.env.CLOUDINARY_API_SECRET,
});

export default cloudinary; 

//db.js
import mongoose from "mongoose";

export const connectDB = async () => {
    try {
        const cann = await mongoose.connect(process.env.MONGODB_URL);
        console.log(`MongoDB connected: ${cann.connection.host}`);
    } catch (error) {
        console.log("MongoDB connection error:", error);
    }
};

//utils.js
import jwt from 'jsonwebtoken';

export const generateToken = (userId, res) => {
    const token = jwt.sign({ userId }, process.env.JWT_SECRET, {
        expiresIn: "15d" //Cookie will expire in 15 days
    })

    res.cookie("jwt", token, {
        maxAge: 15 * 24 * 60 * 60 * 1000, // 1 day in MS
        httpOnly: true,
        sameSite: "Lax",
        secure: process.env.NODE_ENV !== "development"
    
    })

    return token;
}


//middlewares
//auth.middleware.js
import jwt from "jsonwebtoken";
import User from "../models/user.model.js";

export const protectRoute = async (req, res, next) => {
  try {
    const token = req.cookies.jwt;
    
    if (!token) {
      return res.status(401).json({
        message: "Unauthorized access - No token provided",
      });
    }

    const decoded = jwt.verify(token, process.env.JWT_SECRET);
    if (!decoded) {
      return res.status(401).json({
        message: "Unauthorized access - Invalid token",
      });
    }

    console.log("Decoded userId from token:", decoded.userId);
    const user = await User.findById(decoded.userId).select("-password");
    
    if (!user) {
      return res.status(404).json({
        message: "Unauthorized access - User not found",
      });
    }

    req.user = user;

    next();
  } catch (error) {
    console.error("Error in protectRoute middleware:", error.message);
    res.status(500).json({
      message: "Internal server error",
    });
  }
};

//message.models.js
import mongoose from "mongoose";

const messageSchema = new mongoose.Schema(
    {
        senderId:{
            type: mongoose.Schema.Types.ObjectId,
            ref: "User",
            required: true,
        },
        receiverId:{
            type: mongoose.Schema.Types.ObjectId,
            ref: "User",
            required: true,
        },
        text:{
            type: String
        },
        image:{
            type: String
        }
    },
    {
        timestamps: true,
    }
)

const Message = mongoose.model("Message", messageSchema);
export default Message;


//routes
//auth.route.js
import express from "express";
import upload from "../middleware/upload.js";
import { checkAuth, login, logout, signup, updateProfile } from "../controllers/auth.controller.js";
import { protectRoute } from "../middleware/auth.middleware.js";


const router = express.Router();

console.log("Auth routes loaded");
router.post("/signup", signup);
router.post("/login", login);
router.post("/logout", logout);

router.put("/update-profile", protectRoute, updateProfile)

router.get("/check-auth", protectRoute, checkAuth);

export default router;

//message.route.js
import express from 'express';
import { protectRoute } from '../middleware/auth.middleware.js';
import { getMessages, getUsersForSidebar, sendMessage } from '../controllers/message.controller.js';

const router = express.Router();

router.get('/users', protectRoute, getUsersForSidebar);
router.get('/:id', protectRoute, getMessages);

router.post('/send/:id', protectRoute, sendMessage);

export default router;



//index.js
import express from 'express';
import dotenv from 'dotenv';
import cookieParser from 'cookie-parser';
import cors from 'cors';

// import path from 'path';

import { connectDB } from './lib/db.js';

import authRoutes from './routes/auth.route.js';
import messageRoutes from './routes/message.route.js';

dotenv.config();

const app = express();
const PORT = process.env.PORT


app.use(express.json());
app.use(cookieParser())
app.use(
  cors({
  origin: "http://localhost:5173",
  credentials: true,
}));

app.use("/api/auth", authRoutes);
app.use("/api/message", messageRoutes);

// if (process.env.NODE_ENV === "production") {
//   app.use(express.static(path.join(__dirname, "../frontend/dist")));

//   app.get("*", (req, res) => {
//     res.sendFile(path.join(__dirname, "../frontend", "dist", "index.html"));
//   });
// }

app.listen(PORT, () => {
  console.log('Server is running on PORT:', PORT );
  connectDB()
});



//.env
MONGODB_URL=mongodb+srv://shubhamsherkhane2019:JxMEl1uQAKE9N89C@cluster0.8zaardd.mongodb.net/chat_app?retryWrites=true&w=majority&appName=Cluster0

PORT=5000

JWT_SECRET=myscretkey

NODE_ENV=development

CLOUDINARY_CLOUD_NAME=dmz7lwlyf
CLOUDINARY_API_KEY=429525461928139
CLOUDINARY_API_SECRET=B5V446JyfdunkphOHSNmp8kjTmU





//FRONTEND FOLDER

//components
//AuthImagePattern.jsx
const AuthImagePattern = ({ title, subtitle }) => {
  return (
    <div className="hidden lg:flex items-center justify-center bg-base-200 p-12">
      <div className="max-w-md text-center">
        <div className="grid grid-cols-3 gap-3 mb-8">
          {[...Array(9)].map((_, i) => (
            <div
              key={i}
              className={`aw-16 aspect-square rounded-2xl bg-slate-800 ${
                i % 2 === 0 ? "animate-pulse" : ""
              }`}
            />
          ))}
        </div>
        <h2 className="text-2xl font-bold mb-4">{title}</h2>
        <p className="text-base-content/60">{subtitle}</p>
      </div>
    </div>
  );
};

export default AuthImagePattern;

//Navbar.jsx
import React from "react";
import { useAuthStore } from "../store/useAuthStore";
import {
  MessageSquare,
  Settings,
  User,
  LogOut
} from "lucide-react";
import { Link } from "react-router-dom"

const Navbar = () => {
  const { logout, authUser } = useAuthStore();

  return (
    <header className="bg-base-100 border-b border-base-300 fixed w-full top-0 z-40 backdrop-blur-lg bg-base-100/80">
      <div className="container mx-auto px-4 h-16">
        <div className="flex items-center justify-between h-full">
          <div className="flex items-center gap-8">
            <Link
              to="/"
              className="flex items-center gap-2.5 hover:opacity-8- transition-all"
            >
              <MessageSquare className="w-5 h-5 text-primary" />
              <h1 className="text-lg font-bold">Chatty</h1>
            </Link>
          </div>

          <div className="flex items-center gap-2">
            {/* <Link
              to={"/settings"}
              className={`but but-sm gap-2 transition-colors inline-flex items-center bg-gray-900 py-1 px-2 rounded-box`}
            >
              <Settings className="w-4 h-4" />
              <p className="hidden sm:inline">Settings</p>
            </Link> */}
            <Link to={"/settings"} className={`btn btn-sm gap-2`}>
                <Settings className="size-5" />
                <span className="hidden sm:inline">Settings</span>
              </Link>

            {authUser && 
            <>
              <Link to={"/profile"} className={`btn btn-sm gap-2`}>
                <User className="size-5" />
                <span className="hidden sm:inline">Profile</span>
              </Link>

              <button className="flex gap-2 items-center" onClick={logout}>
                <LogOut className="size-5" />
                <span className="hidden sm:inline">Logout</span>
              </button>
            </>}
          </div>
        </div>
      </div>
    </header>
  );
};

export default Navbar;


//lib
//axios.js
import axios from 'axios';

export const axiosInstance = axios.create({
    baseURL: import.meta.env.MODE === "development" ? "http://localhost:5001/api" : "/api",
    withCredentials: true,
});


//pages
//HomePage.jsx
import React from 'react'

const HomePage = () => {
  return (
    <div>
      Home Page
      <p>Welcome to the home page!</p>
    </div>
  )
}

export default HomePage

//LoginPage.jsx
import { useState } from 'react'
import { useAuthStore } from '../store/useAuthStore';
import AuthImagePattern from '../components/AuthImagePattern';
import { Link } from "react-router-dom";
import { Eye, EyeOff, Loader2, Lock, Mail, MessageSquare } from "lucide-react";

const LoginPage = () => {
  const [showPassword, setShowPassword] = useState(false);
  const [formData, setFormData] = useState({
    email: "",
    password: "",
  });
  const { login, isLoggingIn} = useAuthStore();

  const handleSubmit = async (e) => {
    e.preventDefault();
    login(formData);
  }

  return (
    <div className="h-screen grid lg:grid-cols-2">
      {/* Left Side - Form */}
      <div className="flex flex-col justify-center items-center p-6 sm:p-12">
        <div className="w-full max-w-md space-y-8">
          {/* Logo */}
          <div className="text-center mb-8">
            <div className="flex flex-col items-center gap-2 group">
              <div
                className="w-12 h-12 rounded-xl bg-primary/10 flex items-center justify-center group-hover:bg-primary/20
              transition-colors"
              >
                <MessageSquare className="w-6 h-6 text-primary" />
              </div>
              <h1 className="text-2xl font-bold mt-2">Welcome Back</h1>
              <p className="text-base-content/60">Sign in to your account</p>
            </div>
          </div>

          {/* Form */}
          <form onSubmit={handleSubmit} className="space-y-6">
            <div className="form-control">
              <label className="label">
                <span className="label-text font-medium">Email</span>
              </label>
              <div className="relative">
                <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none z-10">
                  <Mail className="h-5 w-5 text-gray-500 text-base-content/40" />
                </div>
                <input
                  type="email"
                  className={`input input-bordered w-full pl-10`}
                  placeholder="you@example.com"
                  value={formData.email}
                  onChange={(e) => setFormData({ ...formData, email: e.target.value })}
                />
              </div>
            </div>

            <div className="form-control">
              <label className="label">
                <span className="label-text font-medium">Password</span>
              </label>
              <div className="relative">
                <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none z-10">
                  <Lock className="h-5 w-5 text-gray-500 text-base-content/40" />
                </div>
                <input
                  type={showPassword ? "text" : "password"}
                  className={`input input-bordered w-full pl-10`}
                  placeholder="••••••••"
                  value={formData.password}
                  onChange={(e) => setFormData({ ...formData, password: e.target.value })}
                />
                <button
                  type="button"
                  className="absolute inset-y-0 right-0 pr-3 flex items-center"
                  onClick={() => setShowPassword(!showPassword)}
                >
                  {showPassword ? (
                    <EyeOff className="h-5 w-5 text-base-content/40" />
                  ) : (
                    <Eye className="h-5 w-5 text-base-content/40" />
                  )}
                </button>
              </div>
            </div>

            <button type="submit" className="btn btn-primary w-full" disabled={isLoggingIn}>
              {isLoggingIn ? (
                <>
                  <Loader2 className="h-5 w-5 animate-spin" />
                  Loading...
                </>
              ) : (
                "Sign in"
              )}
            </button>
          </form>

          <div className="text-center">
            <p className="text-base-content/60">
              Don&apos;t have an account?{" "}
              <Link to="/signup" className="link link-primary">
                Create account
              </Link>
            </p>
          </div>
        </div>
      </div>

      {/* Right Side - Image/Pattern */}
      <AuthImagePattern
        title={"Welcome back!"}
        subtitle={"Sign in to continue your conversations and catch up with your messages."}
      />
    </div>
  );
};

export default LoginPage;

//ProfilePage.jsx
import { useState } from "react";
import { useAuthStore } from "../store/useAuthStore";
import { Camera, Mail, User } from "lucide-react";
// import { set } from "mongoose";
// import toast from "react-hot-toast";

const ProfilePage = () => {
  const { authUser, isUpdatingProfile, updateProfilePic } = useAuthStore();
  const [selectedImage, setSelectedImage] = useState(null);

  const handleImageUpload = async (e) => {
    const file = e.target.files[0];
    if (!file) return;

    const reader = new FileReader();

    reader.readAsDataURL(file);

    reader.onload = async () => {
      const base64Image = reader.result;
      setSelectedImage(base64Image);
      await updateProfilePic({ profilePic: base64Image });
    };
  };

  return (
    <div className="h-screen pt-20">
      <div className="max-w-3xl mx-auto p-4 py-8">
        <div className="bg-zinc-900 rounded-xl p-6 space-y-8">
          <div className="text-center">
            <h1 className="text-2xl font-semibold ">Profile</h1>
            <p className="mt-2">Your profile information</p>
          </div>

          {/* DP upload section */}
          <div className="flex flex-col items-center gap-4">
            <div className="relative">
              <img
                src={selectedImage || authUser.profilePic || "/dp.png"}
                alt="Profile"
                className="size-32 rounded-full border-2 border-primary object-cover"
              />
              <label
                htmlFor="avatar-upload"
                className={`
                  absolute bottom-0 right-0 
                  bg-base-content hover:scale-105
                  p-2 rounded-full cursor-pointer 
                  transition-all duration-200
                  ${
                    isUpdatingProfile ? "animate-pulse pointer-events-none" : ""
                  }
                `}
              >
                <Camera className="w-5 h-5 text-base-200" />
                <input
                  type="file"
                  id="avatar-upload"
                  className="hidden"
                  accept="image/*"
                  onChange={handleImageUpload}
                  disabled={isUpdatingProfile}
                />
              </label>
            </div>
          </div>
          <p className="text-center text-sm text-zinc-400">
            {isUpdatingProfile
              ? "Uploading..."
              : "Click the camera icon to update your Profile Picture"}
          </p>

          {/* User Info */}
          <div className="space-y-6">
            <div className="space-y-1.5">
              <div className="text-sm text-zinc-400 flex items-center gap-2">
                <User className="w-4 h-4" />
                Full Name
              </div>
              <p className="px-4 py-2.5 bg-base-200 rounded-lg border">
                {authUser?.fullName}
              </p>
            </div>

            <div className="space-y-1.5">
              <div className="text-sm text-zinc-400 flex items-center gap-2">
                <Mail className="w-4 h-4" />
                Email Address
              </div>
              <p className="px-4 py-2.5 bg-base-200 rounded-lg border">
                {authUser?.email}
              </p>
            </div>
          </div>

          <div className="mt-6 bg-base-300 rounded-xl p-6">
            <h2 className="text-lg font-medium  mb-4">Account Information</h2>
            <div className="space-y-3 text-sm">
              <div className="flex items-center justify-between py-2 border-b border-zinc-700">
                <span>Member Since</span>
                <span>{authUser.createdAt?.split("T")[0]}</span>
              </div>
              <div className="flex items-center justify-between py-2">
                <span>Account Status</span>
                <span className="text-green-500">Active</span>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};
export default ProfilePage;

//SettingPage.jsx
import React from 'react'

const SettingPage = () => {
  return (
    <div>
      Setting Page
    </div>
  )
}

export default SettingPage

//SignupPage.jsx
import React from "react";
import { useState } from "react";
import { useAuthStore } from "../store/useAuthStore";
import {
  Mail,
  MessageSquare,
  User,
  Lock,
  EyeOff,
  Eye,
  Loader2,
} from "lucide-react";
import AuthImagePattern from "../components/AuthImagePattern";
import toast from "react-hot-toast";

const SignUpPage = () => {
  const [showPassword, setShowPassword] = useState(false);
  const [formData, setFormData] = useState({
    fullName: "",
    email: "",
    password: "",
  });

  const { signup, isSigningUp } = useAuthStore();

  const validateForm = () => {
    if (!formData.fullName.trim()) {
      toast.error("Full Name is required");
      return false;
    }
    if (!formData.email.trim()) {
      toast.error("email is required");
      return false;
    }
    if (!/\S+@\S+\.\S+/.test(formData.email)) {
      toast.error("email format is not valid");
      return false;
    }
    if (!formData.password.trim()) {
      toast.error("password is required");
      return false;
    }
    if (!formData.password.length >= 6) {
      toast.error("password should be at least 6 characters");
      return false;
    }

    return true;
  };

  const handleSubmit = (e) => {
    e.preventDefault();

    const isValid = validateForm();
    if (isValid === true) signup(formData);
  };

  return (
    <div className="min-hscreen grid lg:grid-cols-2">
      {/* Left Side */}
      <div className="flex flex-col justify-center items-center p-6 sm:p-12">
        <div className="w-full max-w-md space-y-8">
          {/* Logo */}
          <div className="text-center m-8"></div>
          <div className="flex flex-col items-center gap-2 group">
            <div className="size-12 rounded-xl bg-primary/10 flex items-center justify-center group-hover:bg-primary/20 transition-colors">
              <MessageSquare className="size-6 text-primary" />
            </div>
            <h1 className="text-2xl font-bold mt-2">Create Account</h1>
            <p className="text-base-content/60">
              get started with your account
            </p>
          </div>

          <form onSubmit={handleSubmit} className="space-y-6">
            <div className="form-control">
              <label className="label">
                <span className="label-text font-medium">Full Name</span>
              </label>
              <div className="relative">
                <div className="absolute inset-y-0 left-0 flex items-center pl-3 pointer-events-none">
                  <User className="size-4 text-base-content/40 z-10" />
                </div>
                <input
                  type="text"
                  className={`input input-bordered w-full pl-10 bg-transparent`}
                  placeholder="eg. John Doe"
                  value={formData.fullName}
                  onChange={(e) =>
                    setFormData({ ...formData, fullName: e.target.value })
                  }
                />
              </div>
            </div>

            <div className="form-control">
              <label className="label">
                <span className="label-text font-medium">Email</span>
              </label>
              <div className="relative">
                <div className="absolute inset-y-0 left-0 flex items-center pl-3 pointer-events-none">
                  <Mail className="size-4 text-base-content/40 z-10" />
                </div>
                <input
                  type="email"
                  className={`input input-bordered w-full pl-10 bg-transparent`}
                  placeholder="eg. user@example.com"
                  value={formData.email}
                  onChange={(e) =>
                    setFormData({ ...formData, email: e.target.value })
                  }
                />
              </div>
            </div>

            <div className="form-control">
              <label className="label">
                <span className="label-text font-medium">Password</span>
              </label>
              <div className="relative">
                <div className="absolute inset-y-0 left-0 flex items-center pl-3 pointer-events-none">
                  <Lock className="size-4 text-base-content/40 z-10" />
                </div>
                <input
                  type={showPassword ? "text" : "password"}
                  className={`input input-bordered w-full pl-10 bg-transparent`}
                  placeholder="********"
                  // placeholder="eg. s#G/^52s@a$V"
                  value={formData.password}
                  onChange={(e) =>
                    setFormData({ ...formData, password: e.target.value })
                  }
                />
                <button
                  type="button"
                  className="absolute inset-y-0 right-0 flex items-center pr-4"
                  onClick={() => setShowPassword(!showPassword)}
                >
                  {showPassword ? (
                    <EyeOff className="size-4 text-base-content/40 z-10" />
                  ) : (
                    <Eye className="size-4 text-base-content/40 z-10" />
                  )}
                </button>
              </div>

              <button
                type="submit"
                className="btn btn-primary w-full mt-6"
                disabled={isSigningUp}
              >
                {isSigningUp ? (
                  <>
                    <Loader2 className="size-5 animate-spin" />
                    Loading...
                  </>
                ) : (
                  "Create Account"
                )}
              </button>
            </div>
          </form>

          <div className="text-center">
            <p className="text-base-content/60">
              Already have an account?{" "}
              <a href="/login" className="link link-primary">
                Sign in
              </a>
            </p>
          </div>
        </div>
      </div>

      {/* Right side */}

      <AuthImagePattern
        title="Join our community"
        subtitle="Stay in touch with your loved ones."
      />
    </div>
  );
};

export default SignUpPage;


//store
//useAuthStore.js
import { create } from "zustand";
import { axiosInstance } from "../lib/axios.js";
import toast from "react-hot-toast";

const BASE_URL = import.meta.env.MODE == "http://localhost:5001";

export const useAuthStore = create((set, get) => ({
  authUser: null,
  isSigningUp: false,
  isLoggingIn: false,
  isUpdateProfile: false,
  isCheckingAuth: true,

  checkAuth: async () => {
    try {
      const res = await axiosInstance.get("/auth/check-auth");
      console.log("Auth Check Success:", res.data);
      set({ authUser: res.data });
    } catch (error) {
      console.log("Error checking authentication:", error);
      set({ authUser: null });
    } finally {
      set({ isCheckingAuth: false });
    }
  },

  signup: async (data) => {
    set({ isSigningUp: true });
    try {
      const res = await axiosInstance.post("/auth/signup", data);
      toast.success("successfully signed up!");
      set({ authUser: res.data });
      // get().connectSocket();
    } catch (error) {
      console.error("Error signing up:", error);
      // toast.error("Error signing up. Please try again.");
      // if (error.response && error.response.status === 400) {
      //   toast.error("Email already exists.");
      // } else if (error.response && error.response.status === 500) {
      //   toast.error("Server error. Please try again later.");
      // } else {
      //   toast.error("Network error. Please check your connection.");
      // }

      if (error.response) {
        if (error.response.status === 400) {
          // Check for specific error message from backend if available
          if (error.response.data && error.response.data.message) {
            toast.error(error.response.data.message); // Display backend's specific error message
          } else {
            toast.error("Invalid signup data. Please check your inputs."); // Generic 400
          }
        } else if (error.response.status === 409) {
          // Common status for conflict, e.g., email already exists
          toast.error(
            "Email already exists. Please use a different email or sign in."
          );
        } else if (error.response.status === 500) {
          toast.error("Server error. Please try again later.");
        } else {
          // Catch other client-side errors like 401, 403, 404, etc.
          toast.error(
            `Error: ${error.response.status} - ${
              error.response.statusText || "Something went wrong on the server."
            }`
          );
        }
      } else if (error.request) {
        // The request was made but no response was received
        // `error.request` is an instance of XMLHttpRequest in the browser and an instance of
        // http.ClientRequest in node.js
        toast.error(
          "Network error. Please check your connection or the server might be down."
        );
        console.error("No response received:", error.request);
      } else {
        // Something happened in setting up the request that triggered an Error
        toast.error("An unexpected error occurred. Please try again.");
        console.error("Error setting up request:", error.message);
      }
    } finally {
      set({ isSigningUp: false });
    }
  },

  login: async (data) => {
    set({ isLoggingIn: true });
    try {
      const res = await axiosInstance.post("/auth/login", data);
      set({ authUser: res.data });
      toast.success("Logged in successfully!");
    } catch (error) {
      if (
        error.response &&
        error.response.data &&
        error.response.data.message
      ) {
        toast.error(error.response.data.message);
      } else if (error.request) {
        toast.error("Network error. Please check your internet connection.");
      } else {
        toast.error("An unexpected error occurred. Please try again.");
      }
      console.error("Login error:", error);
    } finally {
      set({ isLoggingIn: false });
    }
  },

  logout: async () => {
    try {
      await axiosInstance.post("/auth/logout");
      set({ authUser: null });
      toast.success("Logged out successfully!");
      get().disconnectSocket();
    } catch (error) {
      // console.error("Error logging out:", error);
      toast.error(error.response.data.message);
    }
  },

  updateProfilePic: async (data) => {
    set({ isUpdatingProfile: true });
    try {
      const res = await axiosInstance.put("/auth/update-profile", data);
      set({ authUser: res.data });
      toast.success("Profile updated successfully");
    } catch (error) {
      console.log("error in update profile:", error);
      toast.error(error.response.data.message);
    } finally {
      set({ isUpdatingProfile: false });
    }
  },
}));



//App.jsx
import Navbar from "./components/Navbar";
import HomePage from "./pages/HomePage";
import SignUpPage from "./pages/SignUpPage";
import LoginPage from "./pages/LoginPage";
import SettingPage from "./pages/SettingPage";
import ProfilePage from "./pages/ProfilePage";

import { Routes, Route, Navigate } from "react-router-dom";
import { useAuthStore } from "./store/useAuthStore";
import { useEffect } from "react";

import { Loader } from "lucide-react";
import { Toaster } from "react-hot-toast";

const App = () => {
  const { authUser, checkAuth, isCheckingAuth } = useAuthStore();
  const { theme } = useAuthStore();

  useEffect(() => {
    checkAuth();
  }, [checkAuth]); 

  console.log(authUser);

  if (isCheckingAuth && !authUser) {
    return (
      <div className="flex justify-center items-center h-screen">
        <Loader className="animate-spin size-12 text-blue-500" />
      </div>  
    )
  }

  return (
    // <div className='text-green-500 text-3xl font-bold text-center mt-10 bg-black'>
    //   Hello, Shubhh...!!!
    // </div>

    <div data-theme={theme} >
      <Navbar />

      <Routes>
        <Route path="/" element={authUser ? <HomePage /> : <Navigate to="/login"/>} />
        <Route path="/signup" element={!authUser ? <SignUpPage /> : <Navigate to="/"/>} />
        <Route path="/login" element={!authUser ? <LoginPage /> : <Navigate to="/"/>} />
        <Route path="/settings" element={<SettingPage />} />
        <Route path="/profile" element={authUser ? <ProfilePage /> : <Navigate to="/login"/>} />
      </Routes>

      <Toaster />
    </div>
  ); 
};

export default App;



//main.jsx
import { StrictMode } from 'react';
import { createRoot } from 'react-dom/client';
import './index.css';
import App from './App.jsx';

import { BrowserRouter } from 'react-router-dom';

createRoot(document.getElementById('root')).render(
  <StrictMode>
    <BrowserRouter>
      <App />
    </BrowserRouter>
  </StrictMode>
);

How Can I delete messages during chhating, create it



{message.senderId === authUser._id && (
                <button
                  onClick={() => handleDelete(message._id)}
                  className="text-xs text-red-500 mt-2 hover:underline self-end"
                >
                  Delete
                </button>
              )}